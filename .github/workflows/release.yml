name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true

jobs:

  build-arduino:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make assets directory
        run: mkdir assets
      - name: Compile firmware (Nano)
        uses: arduino/compile-sketches@v1.0.0
        with:
          sketch-paths: Source/Firmware
          fqbn: arduino:avr:nano
          cli-compile-flags: |
            - --export-binaries
            - --output-dir=hotdog-fw-nano-bin
          libraries: |
            - name: Protothreads
              version: '1.4.0-arduino.beta.1'
            - name: RF24
              version: '1.4.2'
            - name: BTLE
              version: '1.0.0'
      - name: Zip firmware binaries (Nano)
        run: zip -r assets/hotdog-fw-nano-bin.zip hotdog-fw-nano-bin
      - name: Copy firmware sketch into assets
        run: cp Source/Firmware/Firmware.ino assets/hotdog-fw.ino
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: arduino-assets
          path: assets

  build-pcb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make assets directory
        run: mkdir assets
      - name: Render front PCB
        uses: INTI-CMNB/KiBot@v2_k6
        with:
          config: 'Source/Hardware/hotdog-pcb/kibot.yml'
          board: 'Source/Hardware/hotdog-pcb/hotdog-pcb-front.kicad_pcb'
          schema: 'Source/Hardware/hotdog-pcb/hotdog-pcb-front.kicad_sch'
          dir: assets
      - name: im not your maid kibot
        run: sudo rm -rf assets/pcbout
      - name: Render back PCB
        uses: INTI-CMNB/KiBot@v2_k6
        with:
          config: 'Source/Hardware/hotdog-pcb/kibot.yml'
          board: 'Source/Hardware/hotdog-pcb/hotdog-pcb-back.kicad_pcb'
          schema: 'Source/Hardware/hotdog-pcb/hotdog-pcb-back.kicad_sch'
          dir: assets
      - name: clean up your own shit
        run: sudo rm -rf assets/pcbout
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: pcb-assets
          path: assets

  build-case:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make assets directory
        run: mkdir assets
      - name: Install OpenSCAD
        run: sudo apt-get install openscad
      - name: Build top casing
        run: openscad -o assets/hotdog-case-top.stl -D 'hotdog_top();' Source/Hardware/hotdog-case.scad
      - name: Build bottom casing
        run: openscad -o assets/hotdog-case-bottom.stl -D 'hotdog_bottom();' Source/Hardware/hotdog-case.scad
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: case-assets
          path: assets

  build-server:
    runs-on: windows-2019
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make assets directory
        run: mkdir assets
      - name: Setup msbuild path
        uses: microsoft/setup-msbuild@v1.1
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2
      - name: Build Hotdog Server
        run: |
          cd Source/Server
          nuget restore
          msbuild HotdogServer.sln /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=x86Profile /p:Version=${{ github.event.inputs.version }}
          cp HotdogServer/bin/Release/HotdogServer.exe ../../assets
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: server-assets
          path: assets

  create-release:
    needs:
      - build-arduino
      - build-pcb
      - build-case
      - build-server
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: assets
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Version ${{ github.event.inputs.version }}
          draft: true
          prerelease: false
      - name: Upload release assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: assets
